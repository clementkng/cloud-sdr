From f464fe41c3e8ba9b73ae75e2a101bc96c27c32e3 Mon Sep 17 00:00:00 2001
From: Bruce Potter <bp@us.ibm.com>
Date: Tue, 12 Jun 2018 11:36:51 -0400
Subject: [PATCH] 1st msg hub go example working

---
 .../example-go-publisher/README.md            |  16 +++
 .../msghubpub-confluent.go                    |  82 +++++++++++
 .../example-go-publisher/msghubpub.go         | 133 ++++++++++++++++++
 .../example-go-publisher/server.key           |  27 ++++
 .../example-go-publisher/server.pem           |  21 +++
 5 files changed, 279 insertions(+)
 create mode 100644 cloud/sdr/sdr-data-ingest/example-go-publisher/README.md
 create mode 100644 cloud/sdr/sdr-data-ingest/example-go-publisher/msghubpub-confluent.go
 create mode 100644 cloud/sdr/sdr-data-ingest/example-go-publisher/msghubpub.go
 create mode 100644 cloud/sdr/sdr-data-ingest/example-go-publisher/server.key
 create mode 100644 cloud/sdr/sdr-data-ingest/example-go-publisher/server.pem

diff --git a/cloud/sdr/sdr-data-ingest/example-go-publisher/README.md b/cloud/sdr/sdr-data-ingest/example-go-publisher/README.md
new file mode 100644
index 0000000..b96999b
--- /dev/null
+++ b/cloud/sdr/sdr-data-ingest/example-go-publisher/README.md
@@ -0,0 +1,16 @@
+# IBM Message Hub Publish and Consume Client Examples in Go
+
+## Setup
+
+```
+go get github.com/Shopify/sarama
+openssl genrsa -out server.key 2048
+openssl req -new -x509 -key server.key -out server.pem -days 3650
+export MSGHUB_API_KEY='abcdefg'
+```
+
+## Publish Synchronously
+
+```
+go run msghubpub.go
+```
diff --git a/cloud/sdr/sdr-data-ingest/example-go-publisher/msghubpub-confluent.go b/cloud/sdr/sdr-data-ingest/example-go-publisher/msghubpub-confluent.go
new file mode 100644
index 0000000..9881971
--- /dev/null
+++ b/cloud/sdr/sdr-data-ingest/example-go-publisher/msghubpub-confluent.go
@@ -0,0 +1,82 @@
+// Example for publishing messages to IBM Cloud Message Hub (kafka) using go
+
+/* Current build/run requirements:
+- install librdkafka (on MacOS X: brew install librdkafka pkg-config
+- go get -u github.com/confluentinc/confluent-kafka-go/kafka
+*/ 
+
+package main
+
+import (
+	"fmt"
+	"os"
+	"github.com/confluentinc/confluent-kafka-go/kafka"
+)
+
+func requiredEnvVar(name, defaultVal string) string {
+	v := os.Getenv(name)
+	if defaultVal != "" {
+		v = defaultVal
+	}
+	if v == "" {
+		fmt.Printf("Error: environment variable '%s' must be defined.\n", name)
+		os.Exit(2)
+	}
+	return v
+}
+
+func main() {
+	fmt.Println("Starting message hub publishing example...")
+
+	apiKey := requiredEnvVar("MSGHUB_API_KEY", "")
+	username := apiKey[:16]
+	password := apiKey[16:]
+	fmt.Printf("username: %s, password: %s\n", username, password)
+	brokerUrls := requiredEnvVar("MSGHUB_BROKER_URL", "kafka01-prod02.messagehub.services.us-south.bluemix.net:9093,kafka02-prod02.messagehub.services.us-south.bluemix.net:9093,kafka03-prod02.messagehub.services.us-south.bluemix.net:9093,kafka04-prod02.messagehub.services.us-south.bluemix.net:9093,kafka05-prod02.messagehub.services.us-south.bluemix.net:9093")
+	topic := requiredEnvVar("MSGHUB_TOPIC", "sdr-audio")
+
+	// For valid kafka config values, see https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md
+	kafkaConfig := kafka.ConfigMap{
+		//"bootstrap.servers": brokerUrls,
+		"metadata.broker.list": brokerUrls,
+		"sasl.mechanisms": "PLAIN",
+		"sasl.username": username,
+		"sasl.password": password,
+	}
+
+	p, err := kafka.NewProducer(&kafkaConfig)
+	if err != nil {
+		panic(err)
+	}
+
+	// Delivery report handler for produced messages
+	go func() {
+		for e := range p.Events() {
+			switch ev := e.(type) {
+			case *kafka.Message:
+				if ev.TopicPartition.Error != nil {
+					fmt.Printf("Delivery failed: %v\n", ev.TopicPartition)
+				} else {
+					fmt.Printf("Delivered message to %v\n", ev.TopicPartition)
+				}
+			}
+		}
+	}()
+
+	// Produce messages to topic (asynchronously)
+	fmt.Printf("publishing a few msgs to %s...\n", topic)
+	for _, word := range []string{"someaudiodata" /*, "moreaudiodata"*/} {
+		err := p.Produce(&kafka.Message{
+			TopicPartition: kafka.TopicPartition{Topic: &topic, Partition: kafka.PartitionAny},
+			Value:          []byte(word),
+		}, nil)
+		if err != nil {
+			fmt.Printf("Error from Produce(): %v\n", err)
+		}
+	}
+
+	// Wait for message deliveries
+	p.Flush(15 * 1000)
+
+	fmt.Println("Message hub publishing example complete.")
+}
diff --git a/cloud/sdr/sdr-data-ingest/example-go-publisher/msghubpub.go b/cloud/sdr/sdr-data-ingest/example-go-publisher/msghubpub.go
new file mode 100644
index 0000000..dd804bf
--- /dev/null
+++ b/cloud/sdr/sdr-data-ingest/example-go-publisher/msghubpub.go
@@ -0,0 +1,133 @@
+// Example for publishing messages to IBM Cloud Message Hub (kafka) using go
+
+/* Current build/run requirements:
+- go get github.com/Shopify/sarama
+- openssl genrsa -out server.key 2048
+- openssl req -new -x509 -key server.key -out server.pem -days 3650
+- export MSGHUB_API_KEY='abcdefg'
+*/ 
+
+package main
+
+import (
+	"fmt"
+	"log"
+	"os"
+	"strings"
+	"strconv"
+	"crypto/tls"
+	"github.com/Shopify/sarama"
+)
+
+func main() {
+	fmt.Println("Starting message hub publishing example...")
+
+	apiKey := requiredEnvVar("MSGHUB_API_KEY", "")
+	username := apiKey[:16]
+	password := apiKey[16:]
+	//fmt.Printf("username: %s, password: %s\n", username, password)
+	brokerStr := requiredEnvVar("MSGHUB_BROKER_URL", "kafka01-prod02.messagehub.services.us-south.bluemix.net:9093,kafka02-prod02.messagehub.services.us-south.bluemix.net:9093,kafka03-prod02.messagehub.services.us-south.bluemix.net:9093,kafka04-prod02.messagehub.services.us-south.bluemix.net:9093,kafka05-prod02.messagehub.services.us-south.bluemix.net:9093")
+	brokers := strings.Split(brokerStr, ",")
+	topic := requiredEnvVar("MSGHUB_TOPIC", "sdr-audio")
+
+	sarama.Logger = log.New(os.Stdout, "[sarama] ", log.LstdFlags)
+
+	client, err := NewClient(username, password, apiKey, brokers)
+	exitOnErr(err)
+
+	producer, err := sarama.NewSyncProducerFromClient(client)
+	exitOnErr(err)
+
+	defer Close(client, producer, nil)
+
+	fmt.Printf("publishing a few msgs to %s...\n", topic)
+	for i := 0; i < 10; i++ {
+		err = SendMessage(producer, topic, "message "+strconv.Itoa(i))
+	}
+
+	fmt.Println("Message hub publishing example complete.")
+}
+
+
+func requiredEnvVar(name, defaultVal string) string {
+	v := os.Getenv(name)
+	if defaultVal != "" {
+		v = defaultVal
+	}
+	if v == "" {
+		fmt.Printf("Error: environment variable '%s' must be defined.\n", name)
+		os.Exit(2)
+	}
+	return v
+}
+
+func exitOnErr(err error) {
+	if err != nil {
+		fmt.Printf("Error: %s\n", err.Error())
+		os.Exit(2)
+	}
+}
+
+func tlsConfig(certFile, keyFile string) (*tls.Config, error) {
+	cer, err := tls.LoadX509KeyPair(certFile, keyFile)
+	if err != nil {
+		return nil, err
+	}
+
+	return &tls.Config{Certificates: []tls.Certificate{cer}}, nil
+}
+
+func NewClient(user, pw, apiKey string, brokers []string) (sarama.Client, error) {
+	tlsConfig, err := tlsConfig("server.pem", "server.key")
+	if err != nil {
+		return nil, err
+	}
+
+	config := sarama.NewConfig()
+	config.ClientID = apiKey
+	config.Producer.RequiredAcks = sarama.WaitForAll
+	config.Producer.Retry.Max = 5
+	config.Producer.Return.Successes = true
+	config.Net.TLS.Enable = true
+	config.Net.TLS.Config = tlsConfig
+	config.Net.SASL.User = user
+	config.Net.SASL.Password = pw
+	config.Net.SASL.Enable = true
+
+	client, err := sarama.NewClient(brokers, config)
+	if err != nil {
+		return nil, err
+	}
+
+	return client, nil
+}
+
+func SendMessage(producer sarama.SyncProducer, topic, msg string) error {
+	pMsg := &sarama.ProducerMessage{
+		Topic: topic,
+		Value: sarama.StringEncoder(msg),
+	}
+
+	partition, offset, err := producer.SendMessage(pMsg)
+	if err != nil {
+		return err
+	}
+	fmt.Printf("Message published to topic(%s)/partition(%d)/offset(%d)\n", topic, partition, offset)
+	return nil
+}
+
+func Close(client sarama.Client, producer sarama.SyncProducer, consumer sarama.Consumer) {
+	if producer != nil {
+		if err := producer.Close(); err != nil {
+			log.Fatalln(err)
+		}
+	}
+	if consumer != nil {
+		if err := consumer.Close(); err != nil {
+			log.Fatalln(err)
+		}
+	}
+	if err := client.Close(); err != nil {
+		log.Fatalln(err)
+	}
+}
diff --git a/cloud/sdr/sdr-data-ingest/example-go-publisher/server.key b/cloud/sdr/sdr-data-ingest/example-go-publisher/server.key
new file mode 100644
index 0000000..0b7488c
--- /dev/null
+++ b/cloud/sdr/sdr-data-ingest/example-go-publisher/server.key
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEowIBAAKCAQEAspNj5F/dhYBCk0d7MvaOcHE3FGot2BSd8GJ2iv2WtwODxyYB
++TNJ1ddsge1CNlo6yIeNQjDIzz2PSceSg5XyJoOeYZgFsEKIxLP9HRxi28PzObtY
+/5Fge+dwmHQ1mmDqOfBUr1JWtWBN4SMfk7ETsZ/6a1/t4f2HipcWIgf91urkwaLh
+GVSMsKDw4r7AFj5F37LfgLiuT6ms3rfIBwEveJuDCOu//j6fE4vvNubKI4ZswWdq
+XbMihmTmX4PTIVZ5X6AJgrntQqj4myShGnpC8IYQQyoC6kxLOJytyesaJUclIKfe
+JwzhdGCvjAUeJfBV+Eppasm6Z9A7SW5H2L4NdQIDAQABAoIBAFOcWRALpq+kLwfA
+Vzm0YVraV3yyfkaG2LA9md1YAKIt/hxXemMQlYiPNdnbmb3TH2TWutf7+Xm3DAjy
+bXI42ckYpSZyxG8Tp+/ZijCAIvVc2Nv2ESSQD8nTwk9PUe23ZNO96Biyh7Cip7Q6
++sTvCxaGnfx6TOocB8NnHFDQxxRB3JDXPb7oIOb8pU/PzMY/pjgPwEDdcFbq4Y9U
+dLvGSrrswJvL5xYU579n/3ek2XDz6RRkst8zsLAfRGBL0VeipGj+Oe459YnMa7p2
+2nvTm//W+eDwD091I2So1G3cdFOh5wgccmwyay7brIe9QYL+uzTWOE/m9lEbLkoM
+fcxDsz0CgYEA26E/fR47aG5D4Dvf+6frJ9qnTVs79BxwIe5heYbpmiYov6NS5D+o
+x2+CTblT+DlFPvSFEaCfwqqg6e7iTobGdH6Ct0ex4TEyXQeHELm/iEs58gT343Ys
+Z1Bp4prWHzASRF60eRipXuJElTz/Ydzuf60o6+gnsc6PQ7AnBPK/jF8CgYEA0CW8
+1EhWVoP5swh0l2mfxpSxQ+9+s/CjhJApJ5iFDcYvOTn+P/eVaxTGyf98TUyHwlEn
+Q72QLymyR0dkAl5HAI1uOOxIx/v9O1FimwamqFzflIUk0GA5IOt98fsOlo80gV2Q
+0/gH/ojgHVEm0BBfu+rCVsYB5jm/yIsQYicY9qsCgYEAwvRpZOi3F0X5nkvH0J0H
+kkL3CyWXHGM57gSqJbPqHFkPBr01UUJo0U9cPR3rOYWsv+tRS4pnBedsGvtfixD7
+jGDYK1TKwvhmmkmaTPB04cjU0M40NIard7Hbq7iBpQGI1YOzc2K+xWjYNBkHIJl6
+Y38TugRDaAPRC+aLXEsWWMUCgYA184IlV/ahCCZBxJBL6sHSPBpSbJJf26DWrHMu
+Yzchodv9rk17kRX2onUASKuUcaDCujw+L7VetCUUmqmOf5dRylbmhEA9LdCufmLb
+ofayrxf4rCYlqLtGECQeA5/9YHMQkQsIFkMkM6A7mRxBU+0sjSYATeSSIyfVuE3v
+0wiCbwKBgFMNs+gk05p4yC31u2ry7XJ/tI3ChaU8ZnW1hivNHR2bxyKHXcNu8dnQ
+tAIKipW4yuDtBWrvKxYjo+RU3aqQwzd5ZK77g4u1lyOIlW9e0Jt0UsOUjPfnLyQy
+A0l2JxtuyXKbE7bmFQTxUPs/c3dpkC7W3kA9DL50EJHpnIad7H5C
+-----END RSA PRIVATE KEY-----
diff --git a/cloud/sdr/sdr-data-ingest/example-go-publisher/server.pem b/cloud/sdr/sdr-data-ingest/example-go-publisher/server.pem
new file mode 100644
index 0000000..3ae1a10
--- /dev/null
+++ b/cloud/sdr/sdr-data-ingest/example-go-publisher/server.pem
@@ -0,0 +1,21 @@
+-----BEGIN CERTIFICATE-----
+MIIDhjCCAm4CCQCby9nhrOmyrjANBgkqhkiG9w0BAQsFADCBhDELMAkGA1UEBhMC
+VVMxCzAJBgNVBAgMAk5ZMRMwEQYDVQQHDApTYXVnZXJ0aWVzMQwwCgYDVQQKDANJ
+Qk0xDzANBgNVBAsMBkFwcFNjaTEWMBQGA1UEAwwNYnBAdXMuaWJtLmNvbTEcMBoG
+CSqGSIb3DQEJARYNYnBAdXMuaWJtLmNvbTAeFw0xODA2MTIxMzI0MzJaFw0yODA2
+MDkxMzI0MzJaMIGEMQswCQYDVQQGEwJVUzELMAkGA1UECAwCTlkxEzARBgNVBAcM
+ClNhdWdlcnRpZXMxDDAKBgNVBAoMA0lCTTEPMA0GA1UECwwGQXBwU2NpMRYwFAYD
+VQQDDA1icEB1cy5pYm0uY29tMRwwGgYJKoZIhvcNAQkBFg1icEB1cy5pYm0uY29t
+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAspNj5F/dhYBCk0d7MvaO
+cHE3FGot2BSd8GJ2iv2WtwODxyYB+TNJ1ddsge1CNlo6yIeNQjDIzz2PSceSg5Xy
+JoOeYZgFsEKIxLP9HRxi28PzObtY/5Fge+dwmHQ1mmDqOfBUr1JWtWBN4SMfk7ET
+sZ/6a1/t4f2HipcWIgf91urkwaLhGVSMsKDw4r7AFj5F37LfgLiuT6ms3rfIBwEv
+eJuDCOu//j6fE4vvNubKI4ZswWdqXbMihmTmX4PTIVZ5X6AJgrntQqj4myShGnpC
+8IYQQyoC6kxLOJytyesaJUclIKfeJwzhdGCvjAUeJfBV+Eppasm6Z9A7SW5H2L4N
+dQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAVHWv6nVnNQ//QFAR7m5dgDDM5+nbd
+zcHKzykNUeZ6H7IED9wSh2zWeY409keYj8N1F05TchnlCyS9Ah13VhVrBqvcREE0
+jCxIZigcbGgtrtA/61fhGu8JrqvifjcsjhoGCyW+LrUgj7iboYK0JWxo8DNqJFRv
+s+be4sKAmV6RLrEykQvYiX+/rvGxmkHqHLjo7cCeNpSOa6W2Zaxw8Gn9TNXZQpYf
+9OsS55gilV4EpX3AuWtJt/juOvSzndtQwgi/QSRg6Fsyyt7wEGeDQhAF6g6j8hOu
+WppqG3do8qO0Y8kM3gVTO9BugSSXMfsiskpBEkS1l4R7Vq4Oj+bWSktt
+-----END CERTIFICATE-----
-- 
2.24.3 (Apple Git-128)

