From 1cd7c582e005c76e6538692fd6b07e69452fbc99 Mon Sep 17 00:00:00 2001
From: Bruce Potter <bp@us.ibm.com>
Date: Thu, 14 Jun 2018 07:21:09 -0400
Subject: [PATCH] completed msghub client examples

---
 .../.gitignore                                |   0
 .../Makefile                                  |   0
 .../README.md                                 |   6 +-
 .../msghub-consumer.go                        |  28 ++-
 .../example-go-clients/msghub-producer.go     | 172 ++++++++++++++++++
 .../util/util.go                              |  79 ++------
 .../example-go-publisher/msghub-producer.go   |  88 ---------
 7 files changed, 220 insertions(+), 153 deletions(-)
 rename cloud/sdr/sdr-data-ingest/{example-go-publisher => example-go-clients}/.gitignore (100%)
 rename cloud/sdr/sdr-data-ingest/{example-go-publisher => example-go-clients}/Makefile (100%)
 rename cloud/sdr/sdr-data-ingest/{example-go-publisher => example-go-clients}/README.md (91%)
 rename cloud/sdr/sdr-data-ingest/{example-go-publisher => example-go-clients}/msghub-consumer.go (84%)
 create mode 100644 cloud/sdr/sdr-data-ingest/example-go-clients/msghub-producer.go
 rename cloud/sdr/sdr-data-ingest/{example-go-publisher => example-go-clients}/util/util.go (62%)
 delete mode 100644 cloud/sdr/sdr-data-ingest/example-go-publisher/msghub-producer.go

diff --git a/cloud/sdr/sdr-data-ingest/example-go-publisher/.gitignore b/cloud/sdr/sdr-data-ingest/example-go-clients/.gitignore
similarity index 100%
rename from cloud/sdr/sdr-data-ingest/example-go-publisher/.gitignore
rename to cloud/sdr/sdr-data-ingest/example-go-clients/.gitignore
diff --git a/cloud/sdr/sdr-data-ingest/example-go-publisher/Makefile b/cloud/sdr/sdr-data-ingest/example-go-clients/Makefile
similarity index 100%
rename from cloud/sdr/sdr-data-ingest/example-go-publisher/Makefile
rename to cloud/sdr/sdr-data-ingest/example-go-clients/Makefile
diff --git a/cloud/sdr/sdr-data-ingest/example-go-publisher/README.md b/cloud/sdr/sdr-data-ingest/example-go-clients/README.md
similarity index 91%
rename from cloud/sdr/sdr-data-ingest/example-go-publisher/README.md
rename to cloud/sdr/sdr-data-ingest/example-go-clients/README.md
index 41c554c..ead2454 100644
--- a/cloud/sdr/sdr-data-ingest/example-go-publisher/README.md
+++ b/cloud/sdr/sdr-data-ingest/example-go-clients/README.md
@@ -5,9 +5,13 @@
 ```
 go get github.com/Shopify/sarama
 go get github.com/bsm/sarama-cluster
+export MSGHUB_API_KEY='abcdefg'
+```
+
+You can optionally use your own certificate, which can be created like this:
+```
 openssl genrsa -out server.key 2048
 openssl req -new -x509 -key server.key -out server.pem -days 3650
-export MSGHUB_API_KEY='abcdefg'
 ```
 
 ## Build All Examples
diff --git a/cloud/sdr/sdr-data-ingest/example-go-publisher/msghub-consumer.go b/cloud/sdr/sdr-data-ingest/example-go-clients/msghub-consumer.go
similarity index 84%
rename from cloud/sdr/sdr-data-ingest/example-go-publisher/msghub-consumer.go
rename to cloud/sdr/sdr-data-ingest/example-go-clients/msghub-consumer.go
index ca4d5f7..762cb08 100644
--- a/cloud/sdr/sdr-data-ingest/example-go-publisher/msghub-consumer.go
+++ b/cloud/sdr/sdr-data-ingest/example-go-clients/msghub-consumer.go
@@ -10,9 +10,9 @@ import (
 	"os/signal"
 	"strings"
 	"flag"
-	"github.com/Shopify/sarama"
-	cluster "github.com/bsm/sarama-cluster"
-	"github.com/open-horizon/examples/cloud/sdr/sdr-data-ingest/example-go-publisher/util"
+	"github.com/Shopify/sarama"		// doc: https://godoc.org/github.com/Shopify/sarama
+	cluster "github.com/bsm/sarama-cluster"		// doc: http://godoc.org/github.com/bsm/sarama-cluster
+	"github.com/open-horizon/examples/cloud/sdr/sdr-data-ingest/example-go-clients/util"
 )
 
 func Usage(exitCode int) {
@@ -117,3 +117,25 @@ func main() {
 
 	util.Verbose("message hub consuming example complete")   // we should never get here
 }
+
+
+// Not currently used, because can only listen to 1 partition...
+func ConsumePartition(consumer sarama.Consumer, topic string, partition int32, callback func(*sarama.ConsumerMessage)) error {
+	partitionConsumer, err := consumer.ConsumePartition(topic, partition, sarama.OffsetNewest)
+	if err != nil {
+		return err
+	}
+
+	defer func() {
+		if err := partitionConsumer.Close(); err != nil {
+			log.Fatalln(err)
+		}
+	}()
+
+	for {
+		select {
+		case msg := <-partitionConsumer.Messages():
+			callback(msg)
+		}
+	}
+}
diff --git a/cloud/sdr/sdr-data-ingest/example-go-clients/msghub-producer.go b/cloud/sdr/sdr-data-ingest/example-go-clients/msghub-producer.go
new file mode 100644
index 0000000..c9ee39a
--- /dev/null
+++ b/cloud/sdr/sdr-data-ingest/example-go-clients/msghub-producer.go
@@ -0,0 +1,172 @@
+// Example for producing messages to IBM Cloud Message Hub (kafka) using go.
+// See README.md for setup requirements.
+
+package main
+
+import (
+	"fmt"
+	"log"
+	"os"
+	"os/signal"
+	"strings"
+	"strconv"
+	"flag"
+	"github.com/Shopify/sarama"		// doc: https://godoc.org/github.com/Shopify/sarama
+	"github.com/open-horizon/examples/cloud/sdr/sdr-data-ingest/example-go-clients/util"
+)
+
+func Usage(exitCode int) {
+	fmt.Printf("Usage: %s [-t <topic>] [-s] [-h] [-v] [<message>]\n\nEnvironment Variables: MSGHUB_API_KEY, MSGHUB_BROKER_URL, MSGHUB_TOPIC\n", os.Args[0])
+	os.Exit(exitCode)
+}
+
+func main() {
+	// Get all of the input options
+	var topic string
+	flag.StringVar(&topic, "t", "", "topic")
+	var sync, help bool
+	flag.BoolVar(&sync, "s", false, "synchronous")
+	flag.BoolVar(&help, "h", false, "help")
+	flag.BoolVar(&util.VerboseBool, "v", false, "verbose")
+	flag.Parse()
+	if help { Usage(1) }
+
+	message := ""
+	if flag.NArg() >= 1 {
+		message = flag.Arg(0)
+	}
+
+	apiKey := util.RequiredEnvVar("MSGHUB_API_KEY", "")
+	username := apiKey[:16]
+	password := apiKey[16:]
+	util.Verbose("username: %s, password: %s\n", username, password)
+	brokerStr := util.RequiredEnvVar("MSGHUB_BROKER_URL", "kafka01-prod02.messagehub.services.us-south.bluemix.net:9093,kafka02-prod02.messagehub.services.us-south.bluemix.net:9093,kafka03-prod02.messagehub.services.us-south.bluemix.net:9093,kafka04-prod02.messagehub.services.us-south.bluemix.net:9093,kafka05-prod02.messagehub.services.us-south.bluemix.net:9093")
+	brokers := strings.Split(brokerStr, ",")
+	if topic == "" {
+		topic = util.RequiredEnvVar("MSGHUB_TOPIC", "sdr-audio")
+	}
+
+	util.Verbose("starting message hub producing example...")
+
+	if util.VerboseBool {
+		sarama.Logger = log.New(os.Stdout, "[sarama] ", log.LstdFlags)
+	}
+
+	config, err := util.NewConfig(username, password, apiKey)
+	util.ExitOnErr(err)
+
+	if !sync {
+		// Produce msgs asynchronously
+		producer, err := sarama.NewAsyncProducer(brokers, config)
+		util.ExitOnErr(err)
+
+		defer func() {
+		    if err := producer.Close(); err != nil {
+		        log.Fatalln(err)
+		    }
+		}()
+
+		// Trap SIGINT to trigger a shutdown.
+		signals := make(chan os.Signal, 1)
+		signal.Notify(signals, os.Interrupt)
+
+		// First queue up the msgs in our own buffered channel. In a real application you would probably just send
+		// your msg to the producer.Input() channel right now. We are instead queuing them up here so in a single
+		// select below we can send the msgs and list for results.
+		numMsgs := 10
+		ch := make(chan *sarama.ProducerMessage, numMsgs)
+		for i := 0; i < numMsgs; i++ {
+			ch <- &sarama.ProducerMessage{Topic: topic, Key: nil, Value: sarama.StringEncoder(message + " " + strconv.Itoa(i))}
+			// fmt.Printf("DEBUG: adding msg %d to ch\n", i)
+		}
+
+		// Now enqueue the msgs in the async producer while also listening for errors and successes
+		var enqueued, errors, successes int
+		ProducerLoop:
+		for {
+		    select {
+		    case producerMsg := <-ch:
+		    	producer.Input() <- producerMsg
+		        enqueued++
+				// fmt.Printf("DEBUG: enqueue %d\n", enqueued)
+		    case err := <-producer.Errors():
+		        log.Println("Failed to produce message", err)
+		        errors++
+				// fmt.Printf("DEBUG: error %d\n", errors)
+		        if (errors + successes) >= numMsgs { break ProducerLoop }
+		    case <-producer.Successes():
+		        successes++
+				// fmt.Printf("DEBUG: success %d\n", successes)
+		        if (errors + successes) >= numMsgs { break ProducerLoop }
+		    case <-signals:
+		        break ProducerLoop
+		    }
+		}
+
+		fmt.Printf("%d messages produced to topic: %s; successes: %d errors: %d\n", enqueued, topic, successes, errors)
+	} else {
+		// Produce msgs asynchronously
+		producer, err := sarama.NewSyncProducer(brokers, config)
+		util.ExitOnErr(err)
+
+		defer func() {
+		    if err := producer.Close(); err != nil {
+		        log.Fatalln(err)
+		    }
+		}()
+
+		if message != "" {
+			util.Verbose("producing the specified msg to %s...\n", topic)
+			err = SendSyncMessage(producer, topic, message)
+			util.ExitOnErr(err)
+		} else {
+			numMsgs := 10
+			util.Verbose("producing %d generated msgs to %s...\n", numMsgs, topic)
+			msgs := make([]string, numMsgs)
+			for i := 0; i < numMsgs; i++ {
+				msgs[i] = "message "+strconv.Itoa(i)
+			}
+			err = SendSyncMessages(producer, topic, msgs)
+			util.ExitOnErr(err)
+			/* can do this in a single call instead...
+			for i := 0; i < numMsgs; i++ {
+				err = util.SendSyncMessage(producer, topic, "message "+strconv.Itoa(i))
+				util.ExitOnErr(err)
+			}
+			*/
+		}
+	}
+
+	util.Verbose("message hub producing example complete")
+}
+
+func SendSyncMessage(producer sarama.SyncProducer, topic, msg string) error {
+	pMsg := &sarama.ProducerMessage{
+		Topic: topic,
+		Value: sarama.StringEncoder(msg),
+	}
+
+	partition, offset, err := producer.SendMessage(pMsg)
+	if err != nil {
+		return err
+	}
+	fmt.Printf("Message produced to topic: %s, partition: %d, offset: %d\n", topic, partition, offset)
+	return nil
+}
+
+func SendSyncMessages(producer sarama.SyncProducer, topic string, msgs []string) error {
+	pMsgs := make([]*sarama.ProducerMessage, len(msgs))
+	for i, m := range msgs {
+		pMsgs[i] = &sarama.ProducerMessage{
+			Topic: topic,
+			Value: sarama.StringEncoder(m),
+		}
+	}
+
+	err := producer.SendMessages(pMsgs)
+	if err != nil {
+		return err
+	}
+	fmt.Printf("%d messages produced to topic: %s\n", len(msgs), topic)
+	return nil
+}
diff --git a/cloud/sdr/sdr-data-ingest/example-go-publisher/util/util.go b/cloud/sdr/sdr-data-ingest/example-go-clients/util/util.go
similarity index 62%
rename from cloud/sdr/sdr-data-ingest/example-go-publisher/util/util.go
rename to cloud/sdr/sdr-data-ingest/example-go-clients/util/util.go
index ea4031d..7748bb0 100644
--- a/cloud/sdr/sdr-data-ingest/example-go-publisher/util/util.go
+++ b/cloud/sdr/sdr-data-ingest/example-go-clients/util/util.go
@@ -1,15 +1,9 @@
-// Utility functions for the examples for publishing and consuming messages to/fromm IBM Cloud Message Hub (kafka) using go
-
-/* Todos:
-- implement async producer
-- decide what to do with tls key and pem
-*/
+// Utility functions for the examples for producing and consuming messages to/fromm IBM Cloud Message Hub (kafka) using go
 
 package util
 
 import (
 	"fmt"
-	"log"
 	"os"
 	"strings"
 	"crypto/tls"
@@ -57,9 +51,9 @@ func TlsConfig(certFile, keyFile string) (*tls.Config, error) {
 	return &tls.Config{Certificates: []tls.Certificate{cer}}, nil
 }
 
+/*
 func NewClient(user, pw, apiKey string, brokers []string) (sarama.Client, error) {
-	config := sarama.NewConfig()
-	err := PopulateConfig(config, user, pw, apiKey)
+	config, err := NewConfig(user, pw, apiKey)
 	if err != nil {
 		return nil, err
 	}
@@ -71,76 +65,38 @@ func NewClient(user, pw, apiKey string, brokers []string) (sarama.Client, error)
 
 	return client, nil
 }
+*/
+
+func NewConfig(user, pw, apiKey string) (*sarama.Config, error) {
+	config := sarama.NewConfig()
+	err := PopulateConfig(config, user, pw, apiKey)
+	if err != nil {
+		return nil, err
+	}
+	return config, nil
+}
 
 func PopulateConfig(config *sarama.Config, user, pw, apiKey string) error {
+	/* If you want to create your own certificate and use it, you can...
 	tlsConfig, err := TlsConfig("server.pem", "server.key")
 	if err != nil {
 		return err
 	}
+	*/
 
 	config.ClientID = apiKey
 	config.Producer.RequiredAcks = sarama.WaitForAll
 	config.Producer.Retry.Max = 5
 	config.Producer.Return.Successes = true
 	config.Net.TLS.Enable = true
-	config.Net.TLS.Config = tlsConfig
+	// config.Net.TLS.Config = tlsConfig
 	config.Net.SASL.User = user
 	config.Net.SASL.Password = pw
 	config.Net.SASL.Enable = true
 	return nil
 }
 
-func SendSyncMessage(producer sarama.SyncProducer, topic, msg string) error {
-	pMsg := &sarama.ProducerMessage{
-		Topic: topic,
-		Value: sarama.StringEncoder(msg),
-	}
-
-	partition, offset, err := producer.SendMessage(pMsg)
-	if err != nil {
-		return err
-	}
-	fmt.Printf("Message published to topic: %s, partition: %d, offset: %d\n", topic, partition, offset)
-	return nil
-}
-
-func SendSyncMessages(producer sarama.SyncProducer, topic string, msgs []string) error {
-	pMsgs := make([]*sarama.ProducerMessage, len(msgs))
-	for i, m := range msgs {
-		pMsgs[i] = &sarama.ProducerMessage{
-			Topic: topic,
-			Value: sarama.StringEncoder(m),
-		}
-	}
-
-	err := producer.SendMessages(pMsgs)
-	if err != nil {
-		return err
-	}
-	fmt.Printf("%d messages published to topic: %s\n", len(msgs), topic)
-	return nil
-}
-
-func ConsumePartition(consumer sarama.Consumer, topic string, partition int32, callback func(*sarama.ConsumerMessage)) error {
-	partitionConsumer, err := consumer.ConsumePartition(topic, partition, sarama.OffsetNewest)
-	if err != nil {
-		return err
-	}
-
-	defer func() {
-		if err := partitionConsumer.Close(); err != nil {
-			log.Fatalln(err)
-		}
-	}()
-
-	for {
-		select {
-		case msg := <-partitionConsumer.Messages():
-			callback(msg)
-		}
-	}
-}
-
+/*
 func Close(client sarama.Client, syncProducer sarama.SyncProducer, asyncProducer sarama.AsyncProducer, consumer sarama.Consumer) {
 	if syncProducer != nil {
 		if err := syncProducer.Close(); err != nil {
@@ -161,3 +117,4 @@ func Close(client sarama.Client, syncProducer sarama.SyncProducer, asyncProducer
 		log.Fatalln(err)
 	}
 }
+*/
diff --git a/cloud/sdr/sdr-data-ingest/example-go-publisher/msghub-producer.go b/cloud/sdr/sdr-data-ingest/example-go-publisher/msghub-producer.go
deleted file mode 100644
index 58d84d9..0000000
--- a/cloud/sdr/sdr-data-ingest/example-go-publisher/msghub-producer.go
+++ /dev/null
@@ -1,88 +0,0 @@
-// Example for producing messages to IBM Cloud Message Hub (kafka) using go.
-// See README.md for setup requirements.
-
-package main
-
-import (
-	"fmt"
-	"log"
-	"os"
-	"strings"
-	"strconv"
-	"flag"
-	"github.com/Shopify/sarama"
-	"github.com/open-horizon/examples/cloud/sdr/sdr-data-ingest/example-go-publisher/util"
-)
-
-func Usage(exitCode int) {
-	fmt.Printf("Usage: %s [-t <topic>] [-s] [-h] [-v] [<message>]\n\nEnvironment Variables: MSGHUB_API_KEY, MSGHUB_BROKER_URL, MSGHUB_TOPIC\n", os.Args[0])
-	os.Exit(exitCode)
-}
-
-func main() {
-	// Get all of the input options
-	var topic string
-	flag.StringVar(&topic, "t", "", "topic")
-	var sync, help bool
-	flag.BoolVar(&sync, "s", false, "synchronous")
-	flag.BoolVar(&help, "h", false, "help")
-	flag.BoolVar(&util.VerboseBool, "v", false, "verbose")
-	flag.Parse()
-	if help { Usage(1) }
-
-	message := ""
-	if flag.NArg() >= 1 {
-		message = flag.Arg(0)
-	}
-
-	apiKey := util.RequiredEnvVar("MSGHUB_API_KEY", "")
-	username := apiKey[:16]
-	password := apiKey[16:]
-	util.Verbose("username: %s, password: %s\n", username, password)
-	brokerStr := util.RequiredEnvVar("MSGHUB_BROKER_URL", "kafka01-prod02.messagehub.services.us-south.bluemix.net:9093,kafka02-prod02.messagehub.services.us-south.bluemix.net:9093,kafka03-prod02.messagehub.services.us-south.bluemix.net:9093,kafka04-prod02.messagehub.services.us-south.bluemix.net:9093,kafka05-prod02.messagehub.services.us-south.bluemix.net:9093")
-	brokers := strings.Split(brokerStr, ",")
-	if topic == "" {
-		topic = util.RequiredEnvVar("MSGHUB_TOPIC", "sdr-audio")
-	}
-
-	if !sync {
-
-	} else {
-		util.Verbose("starting message hub producing example...")
-
-		if util.VerboseBool {
-			sarama.Logger = log.New(os.Stdout, "[sarama] ", log.LstdFlags)
-		}
-
-		client, err := util.NewClient(username, password, apiKey, brokers)
-		util.ExitOnErr(err)
-
-		producer, err := sarama.NewSyncProducerFromClient(client)
-		util.ExitOnErr(err)
-
-		defer util.Close(client, producer, nil, nil)
-
-		if message != "" {
-			util.Verbose("producing the specified msg to %s...\n", topic)
-			err = util.SendSyncMessage(producer, topic, message)
-			util.ExitOnErr(err)
-		} else {
-			numMsgs := 10
-			util.Verbose("producing %d generated msgs to %s...\n", numMsgs, topic)
-			msgs := make([]string, numMsgs)
-			for i := 0; i < numMsgs; i++ {
-				msgs[i] = "message "+strconv.Itoa(i)
-			}
-			err = util.SendSyncMessages(producer, topic, msgs)
-			util.ExitOnErr(err)
-			/* can do this in a single call instead...
-			for i := 0; i < numMsgs; i++ {
-				err = util.SendSyncMessage(producer, topic, "message "+strconv.Itoa(i))
-				util.ExitOnErr(err)
-			}
-			*/
-		}
-	}
-
-	util.Verbose("message hub producing example complete")
-}
-- 
2.24.3 (Apple Git-128)

