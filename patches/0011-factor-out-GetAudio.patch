From a7ecb61708f6d5e668159b2848f118e0cb9d722e Mon Sep 17 00:00:00 2001
From: Isaac Leonard <ifleonar@us.ibm.com>
Date: Mon, 18 Jun 2018 13:34:24 -0700
Subject: [PATCH] factor out GetAudio

---
 edge/services/sdr/data_broker/main.go         | 42 +++++------
 .../sdr/data_broker/train/label/main.go       | 69 +------------------
 edge/services/sdr/librtlsdr/main.go           | 13 +---
 3 files changed, 22 insertions(+), 102 deletions(-)

diff --git a/edge/services/sdr/data_broker/main.go b/edge/services/sdr/data_broker/main.go
index e1e0b3b..543ac68 100644
--- a/edge/services/sdr/data_broker/main.go
+++ b/edge/services/sdr/data_broker/main.go
@@ -4,9 +4,8 @@ import (
 	"errors"
 	"fmt"
 	"io/ioutil"
-	"net/http"
-	"strconv"
 
+	rtlsdr "github.com/open-horizon/examples/edge/services/sdr/librtlsdr/rtlsdrclientlib"
 	tf "github.com/tensorflow/tensorflow/tensorflow/go"
 )
 
@@ -36,20 +35,6 @@ func opIsSafe(a string) bool {
 	return false
 }
 
-func getAudio(freq int) (audio []byte, err error) {
-	resp, err := http.Get("http://localhost:8080/audio/" + strconv.Itoa(freq))
-	if err != nil {
-		panic(err)
-	}
-	if resp.StatusCode != http.StatusOK {
-		err = errors.New("bad resp")
-		return
-	}
-	defer resp.Body.Close()
-	audio, err = ioutil.ReadAll(resp.Body)
-	return
-}
-
 type model struct {
 	Sess    *tf.Session
 	InputPH tf.Output
@@ -119,17 +104,22 @@ func main() {
 	if err != nil {
 		panic(err)
 	}
+	stations, err := rtlsdr.GetCeilingSignals("localhost", -13)
+	if err != nil {
+		panic(err)
+	}
 	for {
-		//audio, err := getAudio(91100000)
-		audio, err := getAudio(89700000)
-		if err != nil {
-			panic(err)
-		}
-		ioutil.WriteFile("/tmp/dat1", audio, 0644)
-		val, err := m.goodness(audio)
-		if err != nil {
-			panic(err)
+		for _, station := range stations {
+			fmt.Println("starting freq", station)
+			audio, err := rtlsdr.GetAudio("localhost", int(station))
+			if err != nil {
+				panic(err)
+			}
+			val, err := m.goodness(audio)
+			if err != nil {
+				panic(err)
+			}
+			fmt.Println(station, val)
 		}
-		fmt.Println(val)
 	}
 }
diff --git a/edge/services/sdr/data_broker/train/label/main.go b/edge/services/sdr/data_broker/train/label/main.go
index 3e63d0f..eafd80b 100644
--- a/edge/services/sdr/data_broker/train/label/main.go
+++ b/edge/services/sdr/data_broker/train/label/main.go
@@ -3,76 +3,14 @@ package main
 import (
 	"crypto/sha256"
 	"encoding/base32"
-	"encoding/json"
-	"errors"
 	"fmt"
 	"io/ioutil"
-	"net/http"
 	"os"
-	"strconv"
 
 	"github.com/open-horizon/examples/cloud/sdr/sdr_data_processing/watson/stt"
+	rtlsdr "github.com/open-horizon/examples/edge/services/sdr/librtlsdr/rtlsdrclientlib"
 )
 
-func getAudio(freq int) (audio []byte, err error) {
-	resp, err := http.Get("http://localhost:8080/audio/" + strconv.Itoa(freq))
-	if err != nil {
-		panic(err)
-	}
-	if resp.StatusCode != http.StatusOK {
-		err = errors.New("bad resp")
-		return
-	}
-	defer resp.Body.Close()
-	audio, err = ioutil.ReadAll(resp.Body)
-	if len(audio) < 100 {
-		panic("audio is too short")
-	}
-	return
-}
-
-// FreqToIndex converts a frequnecy to a list index.
-func FreqToIndex(freq float32, data PowerDist) int {
-	percentPos := (freq - data.Low) / (data.High - data.Low)
-	index := int(float32(len(data.Dbm)) * percentPos)
-	return index
-}
-
-func GetCeilingSignals(data PowerDist, celling float32) (stationFreqs []float32) {
-	for i := float32(85900000); i < data.High; i += 200000 {
-		dbm := data.Dbm[FreqToIndex(i, data)]
-		if dbm > celling && dbm != 0 {
-			stationFreqs = append(stationFreqs, i)
-		}
-	}
-	return
-}
-
-// PowerDist is the distribution of power of frequency.
-type PowerDist struct {
-	Low  float32   `json:"low"`
-	High float32   `json:"high"`
-	Dbm  []float32 `json:"dbm"`
-}
-
-func getPower() (power PowerDist, err error) {
-	resp, err := http.Get("http://localhost:8080/power")
-	if err != nil {
-		panic(err)
-	}
-	defer resp.Body.Close()
-	if resp.StatusCode != http.StatusOK {
-		err = errors.New("bad resp")
-		return
-	}
-	jsonByte, err := ioutil.ReadAll(resp.Body)
-	if err != nil {
-		return
-	}
-	err = json.Unmarshal(jsonByte, &power)
-	return
-}
-
 func totalText(transcript stt.TranscribeResponse) (sum int) {
 	if len(transcript.Results) == 0 {
 		return
@@ -96,14 +34,13 @@ func main() {
 	}
 	var i = 0
 	for {
-		power, err := getPower()
+		stations, err := rtlsdr.GetCeilingSignals("localhost", -13)
 		if err != nil {
 			panic(err)
 		}
-		stations := GetCeilingSignals(power, -13)
 		for _, station := range stations {
 			fmt.Println("starting freq", station)
-			audio, err := getAudio(int(station))
+			audio, err := rtlsdr.GetAudio("localhost", int(station))
 			if err != nil {
 				panic(err)
 			}
diff --git a/edge/services/sdr/librtlsdr/main.go b/edge/services/sdr/librtlsdr/main.go
index f46547e..b0b622c 100644
--- a/edge/services/sdr/librtlsdr/main.go
+++ b/edge/services/sdr/librtlsdr/main.go
@@ -12,6 +12,8 @@ import (
 	"strconv"
 	"strings"
 	"time"
+
+	rtlsdr "github.com/open-horizon/examples/edge/services/sdr/librtlsdr/rtlsdrclientlib"
 )
 
 func captureAudio(freq int) (audio []byte, err error) {
@@ -49,7 +51,7 @@ func stringListToFloat(stringList []string) (floatList []float32) {
 	return
 }
 
-func capturePower() (power PowerDist, err error) {
+func capturePower() (power rtlsdr.PowerDist, err error) {
 	start := 70000000
 	end := 110000000
 	power.Low = float32(start)
@@ -57,7 +59,6 @@ func capturePower() (power PowerDist, err error) {
 	cmd := exec.Command("rtl_power", "-e", "10", "-c", "20%", "-f", strconv.Itoa(start)+":"+strconv.Itoa(end)+":10000")
 	var stdout bytes.Buffer
 	cmd.Stdout = &stdout
-	fmt.Println("starting command")
 	err = cmd.Run()
 	if err != nil {
 		panic(err)
@@ -78,17 +79,9 @@ func capturePower() (power PowerDist, err error) {
 		}
 		power.Dbm = append(power.Dbm, stringListToFloat(row[6:])...)
 	}
-	//fmt.Println(recordList)
 	return
 }
 
-// PowerDist is the distribution of power of frequency.
-type PowerDist struct {
-	Low  float32   `json:"low"`
-	High float32   `json:"high"`
-	Dbm  []float32 `json:"dbm"`
-}
-
 func audioHandler(w http.ResponseWriter, r *http.Request) {
 	freq, err := strconv.Atoi(r.URL.Path[7:])
 	if err != nil {
-- 
2.24.3 (Apple Git-128)

